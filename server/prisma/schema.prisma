generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String          @id @default(cuid())
  email             String          @unique
  role              Role            @default(hacker)
  firstName         String?
  lastName          String?
  website           String?
  linkedin          String?
  rules             Boolean         @default(false)
  applicationStatus Boolean         @default(false)
  HackerProfile     HackerProfile?
  PartnerProfile    PartnerProfile?
  MentorProfile     MentorProfile?
}

model PartnerProfile {
  id                  String  @id @default(cuid())
  userId              String  @unique
  user                User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization        String?
  telegram            String?
  twitter             String?
  otherEvents         String? @db.VarChar(500)
  reasonForSupporting String? @db.VarChar(500)
}

model MentorProfile {
  id                 String  @id @default(cuid())
  userId             String  @unique
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  github             String?
  telegram           String?
  twitter            String?
  yearsOfExp         Int?
  ethExp             EthExp? @default(beginner)
  otherEvents        String? @db.VarChar(500)
  reasonForMentoring String? @db.VarChar(500)
}

model HackerProfile {
  id             String       @id @default(cuid())
  userId         String       @unique
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  github         String?
  yearsOfExp     Int?
  ethExp         EthExp?      @default(beginner)
  motivation     Motivation[]
  builtBefore    String?      @db.VarChar(500)
  lookingToBuild String?      @db.VarChar(500)
}

enum Motivation {
  workshop
  resume
  improve
  jobOps
  meetPpl
  launchProduct
  winPrize
  other
}

enum Role {
  hacker
  mentor
  partner
}

enum EthExp {
  beginner
  intermediate
  expert
}
