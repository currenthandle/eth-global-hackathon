generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
  // relationMode = "prisma"
}

enum Role {
  hacker
  mentor
  partner
}

model User {
  id        String  @id @default(cuid())
  email     String  @unique
  role      Role    @default(hacker)
  firstName String?
  lastName  String?

  applicationStatus Boolean         @default(false)
  // wallet    String?
  Experience        Experience?
  HackerProfile     HackerProfile?
  PartnerProfile    PartnerProfile?
  MentorProfile     MentorProfile?
}

model PartnerProfile {
  id                  String  @id @default(cuid())
  userId              String  @unique
  user                User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  website             String?
  organization        String?
  linkedin            String?
  telegram            String?
  twitter             String?
  otherEvents         String? @db.VarChar(500)
  reasonForSupporting String? @db.VarChar(500)
  rules               Boolean @default(false)
}

model MentorProfile {
  id                 String  @id @default(cuid())
  userId             String  @unique
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  website            String?
  github             String?
  linkedin           String?
  telegram           String?
  twitter            String?
  yearsOfExp         Int?
  ethExp             EthExp?
  otherEvents        String? @db.VarChar(500)
  reasonForMentoring String? @db.VarChar(500)
  rules              Boolean @default(false)
}

model HackerProfile {
  id             String       @id @default(cuid())
  userId         String       @unique
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  website        String?
  github         String?
  linkedin       String?
  yearsOfExp     Int?
  ethExp         EthExp?
  motivation     Motivation[]
  builtBefore    String?      @db.VarChar(500)
  lookingToBuild String?      @db.VarChar(500)
  rules          Boolean      @default(false)
}

enum Motivation {
  workshop
  resume
  improve
  jobOps
  meetPpl
  launchProduct
  winPrize
  other
}

enum EthExp {
  beginner
  intermediate
  expert
}

enum ExperienceLevel {
  new
  beginner
  intermediate
  advanced
  expert
}

model Experience {
  id          String           @id @default(cuid())
  userId      String           @unique
  description String
  level       ExperienceLevel?
  years       Int?
  tools       Tool[]
  languages   Language[]
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  // @@index([userId])
}

model Tool {
  id           String     @id @default(cuid())
  experienceId String
  name         String
  experience   Experience @relation(fields: [experienceId], references: [id], onDelete: Cascade)

  // @@index([experienceId])
}

model Language {
  id           String     @id @default(cuid())
  experienceId String
  name         String
  experience   Experience @relation(fields: [experienceId], references: [id], onDelete: Cascade)

  // @@index([experienceId])
}
